        -:    0:Source:C:/Users/Pepega/CLionProjects/OOPLAB1/test.cpp
        -:    0:Graph:C:\Users\Pepega\CLionProjects\OOPLAB1\cmake-build-debug-coverage\CMakeFiles\OOPLAB1.dir\test.cpp.gcno
        -:    0:Data:C:\Users\Pepega\CLionProjects\OOPLAB1\cmake-build-debug-coverage\CMakeFiles\OOPLAB1.dir\test.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "HashTable.h"
        -:    2:#include <gtest/gtest.h>
        -:    3:
        4:    4:TEST(TestValue, Equality){
        1:    5:    Value A(10, 24);
        1:    6:    Value B(10, 24);
       1*:    7:    EXPECT_EQ(A == B, true);
        -:    8:
        1:    9:    Value C;
        1:   10:    Value D(0, 0);
       1*:   11:    EXPECT_EQ(C == D, true);
       1*:   12:    EXPECT_EQ(A == D, false);
        1:   13:}
------------------
_ZN23TestValue_Equality_TestC1Ev:
function _ZN23TestValue_Equality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(TestValue, Equality){
        1:    4-block  0
call    0 returned 1
------------------
_ZN23TestValue_Equality_TestD0Ev:
function _ZN23TestValue_Equality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(TestValue, Equality){
        1:    4-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN23TestValue_Equality_TestD1Ev:
function _ZN23TestValue_Equality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(TestValue, Equality){
        1:    4-block  0
call    0 returned 1
------------------
_ZN23TestValue_Equality_Test8TestBodyEv:
function _ZN23TestValue_Equality_Test8TestBodyEv called 1 returned 100% blocks executed 26%
        1:    4:TEST(TestValue, Equality){
        1:    5:    Value A(10, 24);
        1:    5-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    6:    Value B(10, 24);
        1:    6-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:    7:    EXPECT_EQ(A == B, true);
        1:    7-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    7-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:    7-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:    7-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:    7-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:    7-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:    7-block  6
call   19 never executed
call   20 never executed
        1:    7-block  7
call   21 returned 1
    $$$$$:    7-block  8
    $$$$$:    7-block  9
    $$$$$:    7-block 10
call   22 never executed
    $$$$$:    7-block 11
    $$$$$:    7-block 12
call   23 never executed
    $$$$$:    7-block 13
    $$$$$:    7-block 14
call   24 never executed
        -:    8:
        1:    9:    Value C;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   10:    Value D(0, 0);
        1:   10-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   11:    EXPECT_EQ(C == D, true);
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   11-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   11-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   11-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   11-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   11-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:   11-block  6
call   19 never executed
call   20 never executed
        1:   11-block  7
call   21 returned 1
    $$$$$:   11-block  8
    $$$$$:   11-block  9
    $$$$$:   11-block 10
call   22 never executed
    $$$$$:   11-block 11
    $$$$$:   11-block 12
call   23 never executed
    $$$$$:   11-block 13
    $$$$$:   11-block 14
call   24 never executed
       1*:   12:    EXPECT_EQ(A == D, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   12-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   12-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:   12-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   12-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   12-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:   12-block  5
call   19 never executed
call   20 never executed
        1:   12-block  6
call   21 returned 1
    $$$$$:   12-block  7
    $$$$$:   12-block  8
    $$$$$:   12-block  9
call   22 never executed
    $$$$$:   12-block 10
    $$$$$:   12-block 11
call   23 never executed
    $$$$$:   12-block 12
    $$$$$:   12-block 13
call   24 never executed
        1:   13:}
------------------
        4:   14:TEST(TestList, OperatorEquality){
        2:   15:    List A;
        1:   16:    Value data;
        -:   17:
     1001:   18:    for(size_t i = 0; i < 1000; ++i){
     2000:   19:        std::string key = std::to_string(i);
     1000:   20:        A.Push(key, data);
        -:   21:    }
        2:   22:    List B;
        1:   23:    B = A;
        -:   24:
        -:   25:
       1*:   26:    EXPECT_EQ(A, B);
       1*:   27:    EXPECT_EQ(B, A);
        -:   28:
        1:   29:    A = A;
       1*:   30:    EXPECT_EQ(A, A);
        -:   31:
        1:   32:    A.Push("qwerty", data);
       1*:   33:    EXPECT_NE(A, B);
        1:   34:}
------------------
_ZN30TestList_OperatorEquality_TestC1Ev:
function _ZN30TestList_OperatorEquality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TestList, OperatorEquality){
        1:   14-block  0
call    0 returned 1
------------------
_ZN30TestList_OperatorEquality_TestD0Ev:
function _ZN30TestList_OperatorEquality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TestList, OperatorEquality){
        1:   14-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN30TestList_OperatorEquality_TestD1Ev:
function _ZN30TestList_OperatorEquality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   14:TEST(TestList, OperatorEquality){
        1:   14-block  0
call    0 returned 1
------------------
_ZN30TestList_OperatorEquality_Test8TestBodyEv:
function _ZN30TestList_OperatorEquality_Test8TestBodyEv called 1 returned 100% blocks executed 32%
        1:   14:TEST(TestList, OperatorEquality){
        2:   15:    List A;
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   15-block  1
call    4 never executed
        1:   16:    Value data;
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   17:
     1001:   18:    for(size_t i = 0; i < 1000; ++i){
        1:   18-block  0
     1001:   18-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:   19:        std::string key = std::to_string(i);
     1000:   19-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   19-block  1
call    3 returned 1000
    $$$$$:   19-block  2
call    4 never executed
     1000:   20:        A.Push(key, data);
     1000:   20-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:   21:    }
        2:   22:    List B;
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   22-block  1
call    4 never executed
        1:   23:    B = A;
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   24:
        -:   25:
       1*:   26:    EXPECT_EQ(A, B);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   26-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   26-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   26-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   26-block  5
call   16 never executed
call   17 never executed
        1:   26-block  6
call   18 returned 1
    $$$$$:   26-block  7
call   19 never executed
    $$$$$:   26-block  8
    $$$$$:   26-block  9
call   20 never executed
    $$$$$:   26-block 10
    $$$$$:   26-block 11
call   21 never executed
       1*:   27:    EXPECT_EQ(B, A);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   27-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   27-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   27-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   27-block  4
call   16 never executed
call   17 never executed
        1:   27-block  5
call   18 returned 1
    $$$$$:   27-block  6
call   19 never executed
    $$$$$:   27-block  7
    $$$$$:   27-block  8
call   20 never executed
    $$$$$:   27-block  9
    $$$$$:   27-block 10
call   21 never executed
        -:   28:
        1:   29:    A = A;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   30:    EXPECT_EQ(A, A);
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   30-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   30-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   30-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   30-block  5
call   16 never executed
call   17 never executed
        1:   30-block  6
call   18 returned 1
    $$$$$:   30-block  7
call   19 never executed
    $$$$$:   30-block  8
    $$$$$:   30-block  9
call   20 never executed
    $$$$$:   30-block 10
    $$$$$:   30-block 11
call   21 never executed
        -:   31:
        1:   32:    A.Push("qwerty", data);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   32-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   32-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   32-block  2
call    9 never executed
    $$$$$:   32-block  3
    $$$$$:   32-block  4
call   10 never executed
    $$$$$:   32-block  5
       1*:   33:    EXPECT_NE(A, B);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   33-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   33-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   33-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   33-block  4
call   16 never executed
call   17 never executed
        1:   33-block  5
call   18 returned 1
    $$$$$:   33-block  6
call   19 never executed
    $$$$$:   33-block  7
    $$$$$:   33-block  8
call   20 never executed
    $$$$$:   33-block  9
    $$$$$:   33-block 10
call   21 never executed
        1:   34:}
------------------
        -:   35:
        -:   36:
        4:   37:TEST(TestHashTable, Constructors){
        2:   38:    HashTable A;
     1001:   39:    for(size_t i = 0; i < 1000; ++i){
     1000:   40:        Value data;
     2000:   41:        std::string key = std::to_string(i);
     1000:   42:        A.Insert(key, data);
        -:   43:    }
        2:   44:    HashTable B = A;
        -:   45:
       1*:   46:    EXPECT_EQ(A, B);
       1*:   47:    EXPECT_EQ(B, A);
        -:   48:
        1:   49:}
------------------
_ZN31TestHashTable_Constructors_TestC1Ev:
function _ZN31TestHashTable_Constructors_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   37:TEST(TestHashTable, Constructors){
        1:   37-block  0
call    0 returned 1
------------------
_ZN31TestHashTable_Constructors_TestD0Ev:
function _ZN31TestHashTable_Constructors_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   37:TEST(TestHashTable, Constructors){
        1:   37-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN31TestHashTable_Constructors_TestD1Ev:
function _ZN31TestHashTable_Constructors_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   37:TEST(TestHashTable, Constructors){
        1:   37-block  0
call    0 returned 1
------------------
_ZN31TestHashTable_Constructors_Test8TestBodyEv:
function _ZN31TestHashTable_Constructors_Test8TestBodyEv called 1 returned 100% blocks executed 35%
        1:   37:TEST(TestHashTable, Constructors){
        2:   38:    HashTable A;
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   38-block  1
call    4 never executed
     1001:   39:    for(size_t i = 0; i < 1000; ++i){
        1:   39-block  0
     1001:   39-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   40:        Value data;
     1000:   40-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   41:        std::string key = std::to_string(i);
     1000:   41-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   41-block  1
call    3 returned 1000
    $$$$$:   41-block  2
call    4 never executed
     1000:   42:        A.Insert(key, data);
     1000:   42-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:   43:    }
        2:   44:    HashTable B = A;
        1:   44-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   44-block  1
call    4 never executed
        -:   45:
       1*:   46:    EXPECT_EQ(A, B);
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   46-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   46-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   46-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   46-block  5
call   16 never executed
call   17 never executed
        1:   46-block  6
call   18 returned 1
    $$$$$:   46-block  7
call   19 never executed
    $$$$$:   46-block  8
    $$$$$:   46-block  9
call   20 never executed
    $$$$$:   46-block 10
    $$$$$:   46-block 11
call   21 never executed
       1*:   47:    EXPECT_EQ(B, A);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   47-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   47-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   47-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   47-block  4
call   16 never executed
call   17 never executed
        1:   47-block  5
call   18 returned 1
    $$$$$:   47-block  6
call   19 never executed
    $$$$$:   47-block  7
    $$$$$:   47-block  8
call   20 never executed
    $$$$$:   47-block  9
    $$$$$:   47-block 10
call   21 never executed
        -:   48:
        1:   49:}
------------------
        -:   50:
        4:   51:TEST(TestHashTable, Insert) {
        2:   52:    HashTable A;
        -:   53:
     1001:   54:    for (size_t i = 0; i < 1000; ++i) {
     1000:   55:        Value data(12, 38);
     2000:   56:        std::string key = std::to_string(i);
     1000:   57:        A.Insert(key, data);
    1000*:   58:        EXPECT_FALSE(A.Insert(key, data));
        -:   59:    }
        1:   60:    A.Clear();
     1001:   61:    for (size_t i = 0; i < 1000; ++i) {
     1000:   62:        Value Data;
     2000:   63:        std::string key = std::to_string(i);
    1000*:   64:        EXPECT_TRUE(A.Insert(key, Data));
        -:   65:    }
        -:   66:
        2:   67:    HashTable B;
        1:   68:    B = A;
     1001:   69:    for (size_t i = 0; i < 1000; ++i) {
     1000:   70:        Value data;
     2000:   71:        std::string key = std::to_string(i);
    1000*:   72:        EXPECT_FALSE(B.Insert(key, data));
        -:   73:    }
        -:   74:
     1001:   75:    for (size_t i = 0; i < 1000; ++i) {
    1000*:   76:        EXPECT_TRUE(B.Contains(std::to_string(i)));
        -:   77:    }
        1:   78:}
------------------
_ZN25TestHashTable_Insert_TestC1Ev:
function _ZN25TestHashTable_Insert_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   51:TEST(TestHashTable, Insert) {
        1:   51-block  0
call    0 returned 1
------------------
_ZN25TestHashTable_Insert_TestD0Ev:
function _ZN25TestHashTable_Insert_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   51:TEST(TestHashTable, Insert) {
        1:   51-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN25TestHashTable_Insert_TestD1Ev:
function _ZN25TestHashTable_Insert_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   51:TEST(TestHashTable, Insert) {
        1:   51-block  0
call    0 returned 1
------------------
_ZN25TestHashTable_Insert_Test8TestBodyEv:
function _ZN25TestHashTable_Insert_Test8TestBodyEv called 1 returned 100% blocks executed 34%
        1:   51:TEST(TestHashTable, Insert) {
        2:   52:    HashTable A;
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   52-block  1
call    4 never executed
        -:   53:
     1001:   54:    for (size_t i = 0; i < 1000; ++i) {
        1:   54-block  0
     1001:   54-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   55:        Value data(12, 38);
     1000:   55-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   56:        std::string key = std::to_string(i);
     1000:   56-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:   56-block  1
call    4 never executed
     1000:   57:        A.Insert(key, data);
     1000:   57-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    1000*:   58:        EXPECT_FALSE(A.Insert(key, data));
     1000:   58-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   58-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:   58-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   58-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   58-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   58-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   58-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:   58-block  7
call   23 returned 1000
    $$$$$:   58-block  8
call   24 never executed
    $$$$$:   58-block  9
    $$$$$:   58-block 10
call   25 never executed
    $$$$$:   58-block 11
    $$$$$:   58-block 12
call   26 never executed
    $$$$$:   58-block 13
    $$$$$:   58-block 14
call   27 never executed
        -:   59:    }
        1:   60:    A.Clear();
        1:   60-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:   61:    for (size_t i = 0; i < 1000; ++i) {
        1:   61-block  0
     1001:   61-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   62:        Value Data;
     1000:   62-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   63:        std::string key = std::to_string(i);
     1000:   63-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:   63-block  1
call    4 never executed
    1000*:   64:        EXPECT_TRUE(A.Insert(key, Data));
     1000:   64-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   64-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:   64-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   64-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   64-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   64-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   64-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:   64-block  7
call   23 returned 1000
    $$$$$:   64-block  8
call   24 never executed
    $$$$$:   64-block  9
    $$$$$:   64-block 10
call   25 never executed
    $$$$$:   64-block 11
    $$$$$:   64-block 12
call   26 never executed
    $$$$$:   64-block 13
    $$$$$:   64-block 14
call   27 never executed
        -:   65:    }
        -:   66:
        2:   67:    HashTable B;
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   67-block  1
call    3 returned 1
    $$$$$:   67-block  2
call    4 never executed
        1:   68:    B = A;
        1:   68-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:   69:    for (size_t i = 0; i < 1000; ++i) {
        1:   69-block  0
     1001:   69-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:   70:        Value data;
     1000:   70-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:   71:        std::string key = std::to_string(i);
     1000:   71-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:   71-block  1
call    4 never executed
    1000*:   72:        EXPECT_FALSE(B.Insert(key, data));
     1000:   72-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   72-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:   72-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   72-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   72-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   72-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   72-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:   72-block  7
call   23 returned 1000
    $$$$$:   72-block  8
call   24 never executed
    $$$$$:   72-block  9
    $$$$$:   72-block 10
call   25 never executed
    $$$$$:   72-block 11
    $$$$$:   72-block 12
call   26 never executed
    $$$$$:   72-block 13
    $$$$$:   72-block 14
call   27 never executed
        -:   73:    }
        -:   74:
     1001:   75:    for (size_t i = 0; i < 1000; ++i) {
        1:   75-block  0
     1001:   75-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:   76:        EXPECT_TRUE(B.Contains(std::to_string(i)));
     1000:   76-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:   76-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:   76-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:   76-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   76-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   76-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:   76-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:   76-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:   76-block  8
call   27 returned 1000
    $$$$$:   76-block  9
    $$$$$:   76-block 10
call   28 never executed
    $$$$$:   76-block 11
    $$$$$:   76-block 12
call   29 never executed
    $$$$$:   76-block 13
    $$$$$:   76-block 14
call   30 never executed
    $$$$$:   76-block 15
    $$$$$:   76-block 16
call   31 never executed
        -:   77:    }
        1:   78:}
------------------
        -:   79:
        4:   80:TEST(TestHashTable, MoveConstructor) {
        2:   81:    HashTable A;
      101:   82:    for (int i = 100; i > 0; --i) {
      200:   83:        std::string key = std::to_string(i);
      100:   84:        Value data;
      100:   85:        A.Insert(key, data);
        -:   86:    }
        2:   87:    HashTable B = A;
        2:   88:    HashTable C = std::move(B);
       1*:   89:    EXPECT_EQ(A, C);
        1:   90:}
------------------
_ZN34TestHashTable_MoveConstructor_TestC1Ev:
function _ZN34TestHashTable_MoveConstructor_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   80:TEST(TestHashTable, MoveConstructor) {
        1:   80-block  0
call    0 returned 1
------------------
_ZN34TestHashTable_MoveConstructor_TestD0Ev:
function _ZN34TestHashTable_MoveConstructor_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   80:TEST(TestHashTable, MoveConstructor) {
        1:   80-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN34TestHashTable_MoveConstructor_TestD1Ev:
function _ZN34TestHashTable_MoveConstructor_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   80:TEST(TestHashTable, MoveConstructor) {
        1:   80-block  0
call    0 returned 1
------------------
_ZN34TestHashTable_MoveConstructor_Test8TestBodyEv:
function _ZN34TestHashTable_MoveConstructor_Test8TestBodyEv called 1 returned 100% blocks executed 44%
        1:   80:TEST(TestHashTable, MoveConstructor) {
        2:   81:    HashTable A;
        1:   81-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   81-block  1
call    4 never executed
      101:   82:    for (int i = 100; i > 0; --i) {
        1:   82-block  0
      101:   82-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      200:   83:        std::string key = std::to_string(i);
      100:   83-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   83-block  1
call    3 returned 100
    $$$$$:   83-block  2
call    4 never executed
      100:   84:        Value data;
      100:   84-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   85:        A.Insert(key, data);
      100:   85-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:   86:    }
        2:   87:    HashTable B = A;
        1:   87-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   87-block  1
call    4 never executed
        2:   88:    HashTable C = std::move(B);
        1:   88-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:   88-block  1
call    3 never executed
       1*:   89:    EXPECT_EQ(A, C);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   89-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   89-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   89-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   89-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   89-block  4
call   16 never executed
call   17 never executed
        1:   89-block  5
call   18 returned 1
    $$$$$:   89-block  6
call   19 never executed
    $$$$$:   89-block  7
    $$$$$:   89-block  8
call   20 never executed
    $$$$$:   89-block  9
    $$$$$:   89-block 10
call   21 never executed
        1:   90:}
------------------
        -:   91:
        4:   92:TEST(TestHashTable, Swap) {
        2:   93:    HashTable A;
      101:   94:    for (int i = 100; i > 0; --i) {
      200:   95:        std::string key = std::to_string(i);
      100:   96:        Value data;
      100:   97:        A.Insert(key, data);
        -:   98:    }
        2:   99:    HashTable C = A;
        2:  100:    HashTable B;
      101:  101:    for (int i = 200; i > 100; --i) {
      200:  102:        std::string key = std::to_string(i);
      100:  103:        Value data;
      100:  104:        B.Insert(key, data);
        -:  105:    }
        2:  106:    HashTable D = B;
        1:  107:    A.Swap(B);
       1*:  108:    EXPECT_EQ(A, D);
       1*:  109:    EXPECT_EQ(B, C);
        1:  110:}
------------------
_ZN23TestHashTable_Swap_TestC1Ev:
function _ZN23TestHashTable_Swap_TestC1Ev called 1 returned 100% blocks executed 100%
        1:   92:TEST(TestHashTable, Swap) {
        1:   92-block  0
call    0 returned 1
------------------
_ZN23TestHashTable_Swap_TestD0Ev:
function _ZN23TestHashTable_Swap_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   92:TEST(TestHashTable, Swap) {
        1:   92-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN23TestHashTable_Swap_TestD1Ev:
function _ZN23TestHashTable_Swap_TestD1Ev called 1 returned 100% blocks executed 100%
        1:   92:TEST(TestHashTable, Swap) {
        1:   92-block  0
call    0 returned 1
------------------
_ZN23TestHashTable_Swap_Test8TestBodyEv:
function _ZN23TestHashTable_Swap_Test8TestBodyEv called 1 returned 100% blocks executed 42%
        1:   92:TEST(TestHashTable, Swap) {
        2:   93:    HashTable A;
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   93-block  1
call    4 never executed
      101:   94:    for (int i = 100; i > 0; --i) {
        1:   94-block  0
      101:   94-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      200:   95:        std::string key = std::to_string(i);
      100:   95-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   95-block  1
call    3 returned 100
    $$$$$:   95-block  2
call    4 never executed
      100:   96:        Value data;
      100:   96-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   97:        A.Insert(key, data);
      100:   97-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:   98:    }
        2:   99:    HashTable C = A;
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   99-block  1
call    4 never executed
        2:  100:    HashTable B;
        1:  100-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  100-block  1
call    4 never executed
      101:  101:    for (int i = 200; i > 100; --i) {
        1:  101-block  0
      101:  101-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      200:  102:        std::string key = std::to_string(i);
      100:  102-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  102-block  1
call    3 returned 100
    $$$$$:  102-block  2
call    4 never executed
      100:  103:        Value data;
      100:  103-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  104:        B.Insert(key, data);
      100:  104-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  105:    }
        2:  106:    HashTable D = B;
        1:  106-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  106-block  1
call    4 never executed
        1:  107:    A.Swap(B);
        1:  107-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  108:    EXPECT_EQ(A, D);
        1:  108-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  108-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  108-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  108-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  108-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  108-block  5
call   16 never executed
call   17 never executed
        1:  108-block  6
call   18 returned 1
    $$$$$:  108-block  7
call   19 never executed
    $$$$$:  108-block  8
    $$$$$:  108-block  9
call   20 never executed
    $$$$$:  108-block 10
    $$$$$:  108-block 11
call   21 never executed
       1*:  109:    EXPECT_EQ(B, C);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  109-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  109-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  109-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  109-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  109-block  4
call   16 never executed
call   17 never executed
        1:  109-block  5
call   18 returned 1
    $$$$$:  109-block  6
call   19 never executed
    $$$$$:  109-block  7
    $$$$$:  109-block  8
call   20 never executed
    $$$$$:  109-block  9
    $$$$$:  109-block 10
call   21 never executed
        1:  110:}
------------------
        -:  111:
        4:  112:TEST(TestHashTable, OperatorSquareBrackets) {
        -:  113:
        2:  114:    HashTable A;
     1001:  115:    for (int i = 0; i < 1000; ++i) {
     1000:  116:        Value data(i, i);
     2000:  117:        std::string key = std::to_string(i);
     1000:  118:        A.Insert(key, data);
    2000*:  119:        EXPECT_EQ(A[std::to_string(i)], data);
        -:  120:    }
        -:  121:
        1:  122:    A.Clear();
     1001:  123:    for (int i = 1000; i > 0; --i) {
     1000:  124:        Value data(i, i);
     2000:  125:        std::string key = std::to_string(i);
     1000:  126:        A.Insert(key, data);
    2000*:  127:        EXPECT_EQ(A[std::to_string(i)], data);
        -:  128:    }
        -:  129:
        1:  130:    A.Clear();
     1001:  131:    for (int i = 1000; i > 0; --i) {
     2000:  132:        std::string key = std::to_string(i);
     1000:  133:        Value data;
    2000*:  134:        EXPECT_EQ(A[std::to_string(i)], data);
        -:  135:    }
        1:  136:}
------------------
_ZN41TestHashTable_OperatorSquareBrackets_TestC1Ev:
function _ZN41TestHashTable_OperatorSquareBrackets_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  112:TEST(TestHashTable, OperatorSquareBrackets) {
        1:  112-block  0
call    0 returned 1
------------------
_ZN41TestHashTable_OperatorSquareBrackets_TestD0Ev:
function _ZN41TestHashTable_OperatorSquareBrackets_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  112:TEST(TestHashTable, OperatorSquareBrackets) {
        1:  112-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN41TestHashTable_OperatorSquareBrackets_TestD1Ev:
function _ZN41TestHashTable_OperatorSquareBrackets_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  112:TEST(TestHashTable, OperatorSquareBrackets) {
        1:  112-block  0
call    0 returned 1
------------------
_ZN41TestHashTable_OperatorSquareBrackets_Test8TestBodyEv:
function _ZN41TestHashTable_OperatorSquareBrackets_Test8TestBodyEv called 1 returned 100% blocks executed 41%
        1:  112:TEST(TestHashTable, OperatorSquareBrackets) {
        -:  113:
        2:  114:    HashTable A;
        1:  114-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  114-block  1
call    3 returned 1
    $$$$$:  114-block  2
call    4 never executed
     1001:  115:    for (int i = 0; i < 1000; ++i) {
        1:  115-block  0
     1001:  115-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  116:        Value data(i, i);
     1000:  116-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  117:        std::string key = std::to_string(i);
     1000:  117-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  117-block  1
call    4 never executed
     1000:  118:        A.Insert(key, data);
     1000:  118-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  119:        EXPECT_EQ(A[std::to_string(i)], data);
     1000:  119-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  119-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  119-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  119-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  119-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  119-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  119-block  6
call   22 never executed
call   23 never executed
     1000:  119-block  7
call   24 returned 1000
    $$$$$:  119-block  8
    $$$$$:  119-block  9
call   25 never executed
    $$$$$:  119-block 10
    $$$$$:  119-block 11
call   26 never executed
    $$$$$:  119-block 12
    $$$$$:  119-block 13
call   27 never executed
        -:  120:    }
        -:  121:
        1:  122:    A.Clear();
        1:  122-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:  123:    for (int i = 1000; i > 0; --i) {
        1:  123-block  0
     1001:  123-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  124:        Value data(i, i);
     1000:  124-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  125:        std::string key = std::to_string(i);
     1000:  125-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  125-block  1
call    4 never executed
     1000:  126:        A.Insert(key, data);
     1000:  126-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  127:        EXPECT_EQ(A[std::to_string(i)], data);
     1000:  127-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  127-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  127-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  127-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  127-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  127-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  127-block  6
call   22 never executed
call   23 never executed
     1000:  127-block  7
call   24 returned 1000
    $$$$$:  127-block  8
    $$$$$:  127-block  9
call   25 never executed
    $$$$$:  127-block 10
    $$$$$:  127-block 11
call   26 never executed
    $$$$$:  127-block 12
    $$$$$:  127-block 13
call   27 never executed
        -:  128:    }
        -:  129:
        1:  130:    A.Clear();
        1:  130-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     1001:  131:    for (int i = 1000; i > 0; --i) {
        1:  131-block  0
     1001:  131-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:  132:        std::string key = std::to_string(i);
     1000:  132-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  132-block  1
call    4 never executed
     1000:  133:        Value data;
     1000:  133-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  134:        EXPECT_EQ(A[std::to_string(i)], data);
     1000:  134-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  134-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  134-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  134-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  134-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  134-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  134-block  6
call   22 never executed
call   23 never executed
     1000:  134-block  7
call   24 returned 1000
    $$$$$:  134-block  8
    $$$$$:  134-block  9
call   25 never executed
    $$$$$:  134-block 10
    $$$$$:  134-block 11
call   26 never executed
    $$$$$:  134-block 12
    $$$$$:  134-block 13
call   27 never executed
        -:  135:    }
        1:  136:}
------------------
        4:  137:TEST(TestHashTable, Erase) {
        2:  138:    HashTable A;
        -:  139:
     1001:  140:    for (int i = 0; i < 1000; ++i) {
     1000:  141:        Value data(12, 38);
     1000:  142:        A.Insert(std::to_string(i), data);
        -:  143:    }
     1001:  144:    for(int i = 999; i >= 0; --i){
    1000*:  145:        EXPECT_TRUE(A.Erase(std::to_string(i)));
        -:  146:    }
       1*:  147:    EXPECT_FALSE(A.Erase("qwerty"));
        -:  148:
        2:  149:    HashTable C;
        1:  150:    Value data;
        1:  151:    C.Insert("alt+f3", data);
        1:  152:    C.Insert("alt+f4", data);
       1*:  153:    EXPECT_FALSE(C.Erase("qwerty3"));
       1*:  154:    EXPECT_FALSE(C.Erase("qwerty4"));
        1:  155:}
------------------
_ZN24TestHashTable_Erase_TestC1Ev:
function _ZN24TestHashTable_Erase_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  137:TEST(TestHashTable, Erase) {
        1:  137-block  0
call    0 returned 1
------------------
_ZN24TestHashTable_Erase_TestD0Ev:
function _ZN24TestHashTable_Erase_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  137:TEST(TestHashTable, Erase) {
        1:  137-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN24TestHashTable_Erase_TestD1Ev:
function _ZN24TestHashTable_Erase_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  137:TEST(TestHashTable, Erase) {
        1:  137-block  0
call    0 returned 1
------------------
_ZN24TestHashTable_Erase_Test8TestBodyEv:
function _ZN24TestHashTable_Erase_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  137:TEST(TestHashTable, Erase) {
        2:  138:    HashTable A;
        1:  138-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  138-block  1
call    4 never executed
        -:  139:
     1001:  140:    for (int i = 0; i < 1000; ++i) {
        1:  140-block  0
     1001:  140-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  141:        Value data(12, 38);
     1000:  141-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  142:        A.Insert(std::to_string(i), data);
     1000:  142-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  142-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  142-block  2
call    6 returned 1000
    $$$$$:  142-block  3
call    7 never executed
    $$$$$:  142-block  4
        -:  143:    }
     1001:  144:    for(int i = 999; i >= 0; --i){
        1:  144-block  0
     1001:  144-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  145:        EXPECT_TRUE(A.Erase(std::to_string(i)));
     1000:  145-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  145-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  145-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  145-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  145-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  145-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  145-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  145-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  145-block  8
call   27 returned 1000
    $$$$$:  145-block  9
    $$$$$:  145-block 10
call   28 never executed
    $$$$$:  145-block 11
    $$$$$:  145-block 12
call   29 never executed
    $$$$$:  145-block 13
    $$$$$:  145-block 14
call   30 never executed
    $$$$$:  145-block 15
    $$$$$:  145-block 16
call   31 never executed
        -:  146:    }
       1*:  147:    EXPECT_FALSE(A.Erase("qwerty"));
        1:  147-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  147-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  147-block  2
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  147-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  147-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  147-block  5
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  147-block  6
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  147-block  7
call   26 never executed
call   27 never executed
call   28 never executed
        1:  147-block  8
call   29 returned 1
    $$$$$:  147-block  9
    $$$$$:  147-block 10
    $$$$$:  147-block 11
call   30 never executed
    $$$$$:  147-block 12
    $$$$$:  147-block 13
call   31 never executed
    $$$$$:  147-block 14
    $$$$$:  147-block 15
call   32 never executed
    $$$$$:  147-block 16
    $$$$$:  147-block 17
call   33 never executed
        -:  148:
        2:  149:    HashTable C;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  149-block  0
call    4 never executed
        1:  150:    Value data;
        1:  150-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  151:    C.Insert("alt+f3", data);
        1:  151-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  151-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  151-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  151-block  3
call    9 never executed
    $$$$$:  151-block  4
    $$$$$:  151-block  5
call   10 never executed
    $$$$$:  151-block  6
        1:  152:    C.Insert("alt+f4", data);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  152-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  152-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  152-block  2
call    9 never executed
    $$$$$:  152-block  3
    $$$$$:  152-block  4
call   10 never executed
    $$$$$:  152-block  5
       1*:  153:    EXPECT_FALSE(C.Erase("qwerty3"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  153-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  153-block  1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  153-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  153-block  3
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  153-block  4
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  153-block  5
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  153-block  6
call   26 never executed
call   27 never executed
call   28 never executed
        1:  153-block  7
call   29 returned 1
    $$$$$:  153-block  8
    $$$$$:  153-block  9
    $$$$$:  153-block 10
call   30 never executed
    $$$$$:  153-block 11
    $$$$$:  153-block 12
call   31 never executed
    $$$$$:  153-block 13
    $$$$$:  153-block 14
call   32 never executed
    $$$$$:  153-block 15
    $$$$$:  153-block 16
call   33 never executed
       1*:  154:    EXPECT_FALSE(C.Erase("qwerty4"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  154-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  154-block  1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
branch 11 taken 0 (fallthrough)
branch 12 taken 1
    %%%%%:  154-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  154-block  3
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  154-block  4
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  154-block  5
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  154-block  6
call   26 never executed
call   27 never executed
call   28 never executed
        1:  154-block  7
call   29 returned 1
    $$$$$:  154-block  8
    $$$$$:  154-block  9
    $$$$$:  154-block 10
call   30 never executed
    $$$$$:  154-block 11
    $$$$$:  154-block 12
call   31 never executed
    $$$$$:  154-block 13
    $$$$$:  154-block 14
call   32 never executed
    $$$$$:  154-block 15
    $$$$$:  154-block 16
call   33 never executed
        1:  155:}
------------------
        4:  156:TEST(TestHashTable, At) {
        -:  157:
        2:  158:    HashTable A;
     1001:  159:    for (int i = 0; i < 1000; ++i) {
     1000:  160:        Value data(i, i);
     2000:  161:        std::string key = std::to_string(i);
     1000:  162:        A.Insert(key, data);
    1000*:  163:        EXPECT_EQ(A.At(key), data);
        -:  164:    }
        -:  165:
     1001:  166:    for(size_t i = 1000; i < 2000; ++i){
     2000:  167:        std::string key = std::to_string(i);
    2000*:  168:        EXPECT_THROW(A.At(key), std::runtime_error);
        -:  169:    }
        -:  170:
        -:  171:
        2:  172:    const HashTable B = A;
     1001:  173:    for (int i = 0; i < 1000; ++i) {
     1000:  174:        Value data(i, i);
    2000*:  175:        EXPECT_EQ(B.At(std::to_string(i)), data);
        -:  176:    }
     1001:  177:    for(size_t i = 1000; i < 2000; ++i){
     2000:  178:        std::string key = std::to_string(i);
    2000*:  179:        EXPECT_THROW(B.At(key), std::runtime_error);
        -:  180:    }
        -:  181:
        1:  182:}
------------------
_ZN21TestHashTable_At_TestC1Ev:
function _ZN21TestHashTable_At_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  156:TEST(TestHashTable, At) {
        1:  156-block  0
call    0 returned 1
------------------
_ZN21TestHashTable_At_TestD0Ev:
function _ZN21TestHashTable_At_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  156:TEST(TestHashTable, At) {
        1:  156-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN21TestHashTable_At_TestD1Ev:
function _ZN21TestHashTable_At_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  156:TEST(TestHashTable, At) {
        1:  156-block  0
call    0 returned 1
------------------
_ZN21TestHashTable_At_Test8TestBodyEv:
function _ZN21TestHashTable_At_Test8TestBodyEv called 1 returned 100% blocks executed 33%
        1:  156:TEST(TestHashTable, At) {
        -:  157:
        2:  158:    HashTable A;
        1:  158-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  158-block  1
call    4 never executed
     1001:  159:    for (int i = 0; i < 1000; ++i) {
        1:  159-block  0
     1001:  159-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  160:        Value data(i, i);
     1000:  160-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  161:        std::string key = std::to_string(i);
     1000:  161-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  161-block  1
call    4 never executed
     1000:  162:        A.Insert(key, data);
     1000:  162-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    1000*:  163:        EXPECT_EQ(A.At(key), data);
     1000:  163-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  163-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  163-block  2
call    6 returned 1000
branch  7 taken 0 (fallthrough)
branch  8 taken 1000
    %%%%%:  163-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  163-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  163-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  163-block  6
call   19 never executed
call   20 never executed
     1000:  163-block  7
call   21 returned 1000
    $$$$$:  163-block  8
call   22 never executed
    $$$$$:  163-block  9
    $$$$$:  163-block 10
call   23 never executed
    $$$$$:  163-block 11
    $$$$$:  163-block 12
call   24 never executed
        -:  164:    }
        -:  165:
     1001:  166:    for(size_t i = 1000; i < 2000; ++i){
        1:  166-block  0
     1001:  166-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:  167:        std::string key = std::to_string(i);
     1000:  167-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  167-block  1
call    4 never executed
    2000*:  168:        EXPECT_THROW(A.At(key), std::runtime_error);
     1000:  168-block  0
call    0 returned 1000
call    1 returned 1000
branch  2 taken 1000 (fallthrough)
branch  3 taken 0
     1000:  168-block  1
call    4 returned 1000
branch  5 taken 1000 (fallthrough)
branch  6 taken 0 (throw)
     1000:  168-block  2
branch  7 taken 1000 (fallthrough)
branch  8 taken 0
     1000:  168-block  3
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000 (throw)
     1000:  168-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 1000
    %%%%%:  168-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  168-block  6
    %%%%%:  168-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  168-block  8
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  168-block  9
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:  168-block 10
call   27 never executed
call   28 never executed
     1000:  168-block 11
call   29 returned 1000
     1000:  168-block 12
call   30 returned 1000
call   31 returned 1000
    $$$$$:  168-block 13
call   32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
    $$$$$:  168-block 14
call   36 never executed
branch 37 never executed
branch 38 never executed
    $$$$$:  168-block 15
call   39 never executed
branch 40 never executed
branch 41 never executed
    $$$$$:  168-block 16
call   42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
    $$$$$:  168-block 17
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
    $$$$$:  168-block 18
call   50 never executed
branch 51 never executed
branch 52 never executed
    $$$$$:  168-block 19
call   53 never executed
    $$$$$:  168-block 20
call   54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
    $$$$$:  168-block 21
call   58 never executed
branch 59 never executed
branch 60 never executed
    $$$$$:  168-block 22
call   61 never executed
    $$$$$:  168-block 23
    $$$$$:  168-block 24
call   62 never executed
    $$$$$:  168-block 25
call   63 never executed
    $$$$$:  168-block 26
call   64 never executed
    $$$$$:  168-block 27
    $$$$$:  168-block 28
call   65 never executed
    $$$$$:  168-block 29
    $$$$$:  168-block 30
call   66 never executed
        -:  169:    }
        -:  170:
        -:  171:
        2:  172:    const HashTable B = A;
        1:  172-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  172-block  1
call    3 returned 1
    $$$$$:  172-block  2
call    4 never executed
     1001:  173:    for (int i = 0; i < 1000; ++i) {
        1:  173-block  0
     1001:  173-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  174:        Value data(i, i);
     1000:  174-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
    2000*:  175:        EXPECT_EQ(B.At(std::to_string(i)), data);
     1000:  175-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  175-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  175-block  2
call    6 returned 1000
branch  7 taken 1000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000
    %%%%%:  175-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  175-block  4
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  175-block  5
call   19 never executed
branch 20 never executed
branch 21 never executed
    %%%%%:  175-block  6
call   22 never executed
call   23 never executed
     1000:  175-block  7
call   24 returned 1000
    $$$$$:  175-block  8
    $$$$$:  175-block  9
call   25 never executed
    $$$$$:  175-block 10
    $$$$$:  175-block 11
call   26 never executed
    $$$$$:  175-block 12
    $$$$$:  175-block 13
call   27 never executed
        -:  176:    }
     1001:  177:    for(size_t i = 1000; i < 2000; ++i){
        1:  177-block  0
     1001:  177-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     2000:  178:        std::string key = std::to_string(i);
     1000:  178-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  178-block  1
call    4 never executed
    2000*:  179:        EXPECT_THROW(B.At(key), std::runtime_error);
     1000:  179-block  0
call    0 returned 1000
call    1 returned 1000
branch  2 taken 1000 (fallthrough)
branch  3 taken 0
     1000:  179-block  1
call    4 returned 1000
branch  5 taken 1000 (fallthrough)
branch  6 taken 0 (throw)
     1000:  179-block  2
branch  7 taken 1000 (fallthrough)
branch  8 taken 0
     1000:  179-block  3
call    9 returned 1000
branch 10 taken 0 (fallthrough)
branch 11 taken 1000 (throw)
     1000:  179-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 1000
    %%%%%:  179-block  5
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  179-block  6
    %%%%%:  179-block  7
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  179-block  8
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  179-block  9
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:  179-block 10
call   27 never executed
call   28 never executed
     1000:  179-block 11
call   29 returned 1000
     1000:  179-block 12
call   30 returned 1000
call   31 returned 1000
    $$$$$:  179-block 13
call   32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
    $$$$$:  179-block 14
call   36 never executed
branch 37 never executed
branch 38 never executed
    $$$$$:  179-block 15
call   39 never executed
branch 40 never executed
branch 41 never executed
    $$$$$:  179-block 16
call   42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
    $$$$$:  179-block 17
call   46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
    $$$$$:  179-block 18
call   50 never executed
branch 51 never executed
branch 52 never executed
    $$$$$:  179-block 19
call   53 never executed
    $$$$$:  179-block 20
call   54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
    $$$$$:  179-block 21
call   58 never executed
branch 59 never executed
branch 60 never executed
    $$$$$:  179-block 22
call   61 never executed
    $$$$$:  179-block 23
    $$$$$:  179-block 24
call   62 never executed
    $$$$$:  179-block 25
call   63 never executed
    $$$$$:  179-block 26
call   64 never executed
    $$$$$:  179-block 27
    $$$$$:  179-block 28
call   65 never executed
    $$$$$:  179-block 29
    $$$$$:  179-block 30
call   66 never executed
        -:  180:    }
        -:  181:
        1:  182:}
------------------
        4:  183:TEST(TestHashTable, Contains) {
        2:  184:    HashTable A;
     101*:  185:    for(int i = 0; i < 100; ++i) EXPECT_FALSE(A.Contains(std::to_string(i)));
        -:  186:
     1001:  187:    for (size_t i = 0; i < 1000; ++i) {
     1000:  188:        Value data;
     2000:  189:        std::string key = std::to_string(i);
     1000:  190:        A.Insert(key, data);
        -:  191:    }
     1001:  192:    for(int i = 999; i >= 0; --i) {
    1000*:  193:        EXPECT_TRUE(A.Contains(std::to_string(i)));
        -:  194:    }
        1:  195:}
------------------
_ZN27TestHashTable_Contains_TestC1Ev:
function _ZN27TestHashTable_Contains_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  183:TEST(TestHashTable, Contains) {
        1:  183-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Contains_TestD0Ev:
function _ZN27TestHashTable_Contains_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  183:TEST(TestHashTable, Contains) {
        1:  183-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN27TestHashTable_Contains_TestD1Ev:
function _ZN27TestHashTable_Contains_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  183:TEST(TestHashTable, Contains) {
        1:  183-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Contains_Test8TestBodyEv:
function _ZN27TestHashTable_Contains_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:  183:TEST(TestHashTable, Contains) {
        2:  184:    HashTable A;
        1:  184-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  184-block  1
call    3 returned 1
    $$$$$:  184-block  2
call    4 never executed
     101*:  185:    for(int i = 0; i < 100; ++i) EXPECT_FALSE(A.Contains(std::to_string(i)));
        1:  185-block  0
      101:  185-block  1
branch  0 taken 100 (fallthrough)
branch  1 taken 1
      100:  185-block  2
call    2 returned 100
branch  3 taken 100 (fallthrough)
branch  4 taken 0 (throw)
      100:  185-block  3
call    5 returned 100
branch  6 taken 100 (fallthrough)
branch  7 taken 0 (throw)
      100:  185-block  4
call    8 returned 100
call    9 returned 100
call   10 returned 100
branch 11 taken 0 (fallthrough)
branch 12 taken 100
    %%%%%:  185-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  185-block  6
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  185-block  7
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
    %%%%%:  185-block  8
call   23 never executed
branch 24 never executed
branch 25 never executed
    %%%%%:  185-block  9
call   26 never executed
call   27 never executed
call   28 never executed
      100:  185-block 10
call   29 returned 100
    $$$$$:  185-block 11
    $$$$$:  185-block 12
call   30 never executed
    $$$$$:  185-block 13
    $$$$$:  185-block 14
call   31 never executed
    $$$$$:  185-block 15
    $$$$$:  185-block 16
call   32 never executed
    $$$$$:  185-block 17
    $$$$$:  185-block 18
call   33 never executed
        -:  186:
     1001:  187:    for (size_t i = 0; i < 1000; ++i) {
        1:  187-block  0
     1001:  187-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  188:        Value data;
     1000:  188-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  189:        std::string key = std::to_string(i);
     1000:  189-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  189-block  1
call    3 returned 1000
    $$$$$:  189-block  2
call    4 never executed
     1000:  190:        A.Insert(key, data);
     1000:  190-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:  191:    }
     1001:  192:    for(int i = 999; i >= 0; --i) {
        1:  192-block  0
     1001:  192-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  193:        EXPECT_TRUE(A.Contains(std::to_string(i)));
     1000:  193-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  193-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  193-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  193-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  193-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  193-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  193-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  193-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  193-block  8
call   27 returned 1000
    $$$$$:  193-block  9
    $$$$$:  193-block 10
call   28 never executed
    $$$$$:  193-block 11
    $$$$$:  193-block 12
call   29 never executed
    $$$$$:  193-block 13
    $$$$$:  193-block 14
call   30 never executed
    $$$$$:  193-block 15
    $$$$$:  193-block 16
call   31 never executed
        -:  194:    }
        1:  195:}
------------------
        -:  196:
        4:  197:TEST(TestHashTable, Empty_Size_Clear) {
        2:  198:    HashTable A;
     1001:  199:    for (size_t i = 0; i < 1000; ++i) {
     1000:  200:        Value data(i, i);
     2000:  201:        std::string key = std::to_string(i);
     1000:  202:        A.Insert(key, data);
        -:  203:    }
       1*:  204:    EXPECT_EQ(A.Size(), 1000);
        1:  205:    A.Clear();
       1*:  206:    EXPECT_EQ(A.Empty(), true);
       1*:  207:    EXPECT_EQ(A.Size(), 0);
        1:  208:}
------------------
_ZN35TestHashTable_Empty_Size_Clear_TestC1Ev:
function _ZN35TestHashTable_Empty_Size_Clear_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  197:TEST(TestHashTable, Empty_Size_Clear) {
        1:  197-block  0
call    0 returned 1
------------------
_ZN35TestHashTable_Empty_Size_Clear_TestD0Ev:
function _ZN35TestHashTable_Empty_Size_Clear_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  197:TEST(TestHashTable, Empty_Size_Clear) {
        1:  197-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN35TestHashTable_Empty_Size_Clear_TestD1Ev:
function _ZN35TestHashTable_Empty_Size_Clear_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  197:TEST(TestHashTable, Empty_Size_Clear) {
        1:  197-block  0
call    0 returned 1
------------------
_ZN35TestHashTable_Empty_Size_Clear_Test8TestBodyEv:
function _ZN35TestHashTable_Empty_Size_Clear_Test8TestBodyEv called 1 returned 100% blocks executed 29%
        1:  197:TEST(TestHashTable, Empty_Size_Clear) {
        2:  198:    HashTable A;
        1:  198-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  198-block  1
call    4 never executed
     1001:  199:    for (size_t i = 0; i < 1000; ++i) {
        1:  199-block  0
     1001:  199-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  200:        Value data(i, i);
     1000:  200-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  201:        std::string key = std::to_string(i);
     1000:  201-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  201-block  1
call    3 returned 1000
    $$$$$:  201-block  2
call    4 never executed
     1000:  202:        A.Insert(key, data);
     1000:  202-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
        -:  203:    }
       1*:  204:    EXPECT_EQ(A.Size(), 1000);
        1:  204-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  204-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  204-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  204-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  204-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  204-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  204-block  6
call   19 never executed
call   20 never executed
        1:  204-block  7
call   21 returned 1
    $$$$$:  204-block  8
    $$$$$:  204-block  9
    $$$$$:  204-block 10
call   22 never executed
    $$$$$:  204-block 11
    $$$$$:  204-block 12
call   23 never executed
    $$$$$:  204-block 13
    $$$$$:  204-block 14
call   24 never executed
        1:  205:    A.Clear();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  206:    EXPECT_EQ(A.Empty(), true);
        1:  206-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  206-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  206-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  206-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  206-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  206-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  206-block  6
call   19 never executed
call   20 never executed
        1:  206-block  7
call   21 returned 1
    $$$$$:  206-block  8
    $$$$$:  206-block  9
    $$$$$:  206-block 10
call   22 never executed
    $$$$$:  206-block 11
    $$$$$:  206-block 12
call   23 never executed
    $$$$$:  206-block 13
    $$$$$:  206-block 14
call   24 never executed
       1*:  207:    EXPECT_EQ(A.Size(), 0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  207-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  207-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  207-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  207-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  207-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  207-block  5
call   19 never executed
call   20 never executed
        1:  207-block  6
call   21 returned 1
    $$$$$:  207-block  7
    $$$$$:  207-block  8
    $$$$$:  207-block  9
call   22 never executed
    $$$$$:  207-block 10
    $$$$$:  207-block 11
call   23 never executed
    $$$$$:  207-block 12
    $$$$$:  207-block 13
call   24 never executed
        1:  208:}
------------------
        -:  209:
        4:  210:TEST(TestHashTable, Equality) {
        2:  211:    HashTable A;
     1001:  212:    for (size_t i = 0; i < 1000; ++i) {
     1000:  213:        Value data;
     2000:  214:        std::string key = std::to_string(i);
    1000*:  215:        EXPECT_TRUE(A.Insert(key, data));
        -:  216:    }
        -:  217:
        2:  218:    HashTable B;
     2001:  219:    for (int i = 0; i < 2000; ++i) {
     2000:  220:        Value data;
     4000:  221:        std::string key = std::to_string(i);
    2000*:  222:        EXPECT_TRUE(B.Insert(key, data));
        -:  223:    }
     1001:  224:    for(int i = 1000; i < 2000; ++i) {
    1000*:  225:        EXPECT_TRUE(B.Erase(std::to_string(i)));
        -:  226:    }
        -:  227:
       1*:  228:    EXPECT_EQ(A == B, true);
        -:  229:
        1:  230:    A = A;
       1*:  231:    EXPECT_EQ(A == A, true);
        -:  232:
        1:  233:    Value Data;
        1:  234:    A.Insert("qwerty", Data);
       1*:  235:    EXPECT_EQ(A == B, false);
        -:  236:
        1:  237:    A.Erase("qwerty");
        1:  238:    A.Erase("0");
        1:  239:    A.Insert("UNIQUE_KEY", Data);
       1*:  240:    EXPECT_EQ(A == B, false);
        1:  241:}
------------------
_ZN27TestHashTable_Equality_TestC1Ev:
function _ZN27TestHashTable_Equality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  210:TEST(TestHashTable, Equality) {
        1:  210-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Equality_TestD0Ev:
function _ZN27TestHashTable_Equality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  210:TEST(TestHashTable, Equality) {
        1:  210-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN27TestHashTable_Equality_TestD1Ev:
function _ZN27TestHashTable_Equality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  210:TEST(TestHashTable, Equality) {
        1:  210-block  0
call    0 returned 1
------------------
_ZN27TestHashTable_Equality_Test8TestBodyEv:
function _ZN27TestHashTable_Equality_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:  210:TEST(TestHashTable, Equality) {
        2:  211:    HashTable A;
        1:  211-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  211-block  1
call    4 never executed
     1001:  212:    for (size_t i = 0; i < 1000; ++i) {
        1:  212-block  0
     1001:  212-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  213:        Value data;
     1000:  213-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  214:        std::string key = std::to_string(i);
     1000:  214-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  214-block  1
call    4 never executed
    1000*:  215:        EXPECT_TRUE(A.Insert(key, data));
     1000:  215-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  215-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:  215-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  215-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  215-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  215-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  215-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:  215-block  7
call   23 returned 1000
    $$$$$:  215-block  8
call   24 never executed
    $$$$$:  215-block  9
    $$$$$:  215-block 10
call   25 never executed
    $$$$$:  215-block 11
    $$$$$:  215-block 12
call   26 never executed
    $$$$$:  215-block 13
    $$$$$:  215-block 14
call   27 never executed
        -:  216:    }
        -:  217:
        2:  218:    HashTable B;
        1:  218-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  218-block  1
call    4 never executed
     2001:  219:    for (int i = 0; i < 2000; ++i) {
        1:  219-block  0
     2001:  219-block  1
branch  0 taken 2000 (fallthrough)
branch  1 taken 1
     2000:  220:        Value data;
     2000:  220-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     4000:  221:        std::string key = std::to_string(i);
     2000:  221-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2000
    $$$$$:  221-block  1
call    4 never executed
    2000*:  222:        EXPECT_TRUE(B.Insert(key, data));
     2000:  222-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  222-block  1
call    3 returned 2000
call    4 returned 2000
branch  5 taken 0 (fallthrough)
branch  6 taken 2000
    %%%%%:  222-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  222-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  222-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  222-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  222-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     2000:  222-block  7
call   23 returned 2000
    $$$$$:  222-block  8
call   24 never executed
    $$$$$:  222-block  9
    $$$$$:  222-block 10
call   25 never executed
    $$$$$:  222-block 11
    $$$$$:  222-block 12
call   26 never executed
    $$$$$:  222-block 13
    $$$$$:  222-block 14
call   27 never executed
        -:  223:    }
     1001:  224:    for(int i = 1000; i < 2000; ++i) {
        1:  224-block  0
     1001:  224-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  225:        EXPECT_TRUE(B.Erase(std::to_string(i)));
     1000:  225-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  225-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  225-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  225-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  225-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  225-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  225-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  225-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  225-block  8
call   27 returned 1000
    $$$$$:  225-block  9
    $$$$$:  225-block 10
call   28 never executed
    $$$$$:  225-block 11
    $$$$$:  225-block 12
call   29 never executed
    $$$$$:  225-block 13
    $$$$$:  225-block 14
call   30 never executed
    $$$$$:  225-block 15
    $$$$$:  225-block 16
call   31 never executed
        -:  226:    }
        -:  227:
       1*:  228:    EXPECT_EQ(A == B, true);
        1:  228-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  228-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  228-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  228-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  228-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  228-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  228-block  6
call   19 never executed
call   20 never executed
        1:  228-block  7
call   21 returned 1
    $$$$$:  228-block  8
    $$$$$:  228-block  9
    $$$$$:  228-block 10
call   22 never executed
    $$$$$:  228-block 11
    $$$$$:  228-block 12
call   23 never executed
    $$$$$:  228-block 13
    $$$$$:  228-block 14
call   24 never executed
        -:  229:
        1:  230:    A = A;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  231:    EXPECT_EQ(A == A, true);
        1:  231-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  231-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  231-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  231-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  231-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  231-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  231-block  6
call   19 never executed
call   20 never executed
        1:  231-block  7
call   21 returned 1
    $$$$$:  231-block  8
    $$$$$:  231-block  9
    $$$$$:  231-block 10
call   22 never executed
    $$$$$:  231-block 11
    $$$$$:  231-block 12
call   23 never executed
    $$$$$:  231-block 13
    $$$$$:  231-block 14
call   24 never executed
        -:  232:
        1:  233:    Value Data;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  234:    A.Insert("qwerty", Data);
        1:  234-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  234-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  234-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  234-block  3
call    9 never executed
    $$$$$:  234-block  4
    $$$$$:  234-block  5
call   10 never executed
    $$$$$:  234-block  6
       1*:  235:    EXPECT_EQ(A == B, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  235-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  235-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  235-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  235-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  235-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  235-block  5
call   19 never executed
call   20 never executed
        1:  235-block  6
call   21 returned 1
    $$$$$:  235-block  7
    $$$$$:  235-block  8
    $$$$$:  235-block  9
call   22 never executed
    $$$$$:  235-block 10
    $$$$$:  235-block 11
call   23 never executed
    $$$$$:  235-block 12
    $$$$$:  235-block 13
call   24 never executed
        -:  236:
        1:  237:    A.Erase("qwerty");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  237-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  237-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  237-block  2
call    9 never executed
    $$$$$:  237-block  3
    $$$$$:  237-block  4
call   10 never executed
    $$$$$:  237-block  5
        1:  238:    A.Erase("0");
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  238-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  238-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  238-block  2
call    9 never executed
    $$$$$:  238-block  3
    $$$$$:  238-block  4
call   10 never executed
    $$$$$:  238-block  5
        1:  239:    A.Insert("UNIQUE_KEY", Data);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  239-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  239-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:  239-block  2
call    9 never executed
    $$$$$:  239-block  3
    $$$$$:  239-block  4
call   10 never executed
    $$$$$:  239-block  5
       1*:  240:    EXPECT_EQ(A == B, false);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  240-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  240-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  240-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  240-block  3
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  240-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  240-block  5
call   19 never executed
call   20 never executed
        1:  240-block  6
call   21 returned 1
    $$$$$:  240-block  7
    $$$$$:  240-block  8
    $$$$$:  240-block  9
call   22 never executed
    $$$$$:  240-block 10
    $$$$$:  240-block 11
call   23 never executed
    $$$$$:  240-block 12
    $$$$$:  240-block 13
call   24 never executed
        1:  241:}
------------------
        -:  242:
        4:  243:TEST(TestHashTable, Inequality) {
        2:  244:    HashTable A;
     1001:  245:    for (size_t i = 0; i < 1000; ++i) {
     1000:  246:        Value data;
     2000:  247:        std::string key = std::to_string(i);
    1000*:  248:        EXPECT_TRUE(A.Insert(key, data));
        -:  249:    }
        -:  250:
        2:  251:    HashTable B;
     2001:  252:    for (int i = 0; i < 2000; ++i) {
     2000:  253:        Value data;
     4000:  254:        std::string key = std::to_string(i);
    2000*:  255:        EXPECT_TRUE(B.Insert(key, data));
        -:  256:    }
     1001:  257:    for(int i = 1000; i < 2000; ++i) {
    1000*:  258:        EXPECT_TRUE(B.Erase(std::to_string(i)));
        -:  259:    }
        -:  260:
       1*:  261:    EXPECT_EQ(A != B, false);
        1:  262:}
------------------
_ZN29TestHashTable_Inequality_TestC1Ev:
function _ZN29TestHashTable_Inequality_TestC1Ev called 1 returned 100% blocks executed 100%
        1:  243:TEST(TestHashTable, Inequality) {
        1:  243-block  0
call    0 returned 1
------------------
_ZN29TestHashTable_Inequality_TestD0Ev:
function _ZN29TestHashTable_Inequality_TestD0Ev called 1 returned 100% blocks executed 100%
        1:  243:TEST(TestHashTable, Inequality) {
        1:  243-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN29TestHashTable_Inequality_TestD1Ev:
function _ZN29TestHashTable_Inequality_TestD1Ev called 1 returned 100% blocks executed 100%
        1:  243:TEST(TestHashTable, Inequality) {
        1:  243-block  0
call    0 returned 1
------------------
_ZN29TestHashTable_Inequality_Test8TestBodyEv:
function _ZN29TestHashTable_Inequality_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:  243:TEST(TestHashTable, Inequality) {
        2:  244:    HashTable A;
        1:  244-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  244-block  1
call    4 never executed
     1001:  245:    for (size_t i = 0; i < 1000; ++i) {
        1:  245-block  0
     1001:  245-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
     1000:  246:        Value data;
     1000:  246-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  247:        std::string key = std::to_string(i);
     1000:  247-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1000
    $$$$$:  247-block  1
call    4 never executed
    1000*:  248:        EXPECT_TRUE(A.Insert(key, data));
     1000:  248-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  248-block  1
call    3 returned 1000
call    4 returned 1000
branch  5 taken 0 (fallthrough)
branch  6 taken 1000
    %%%%%:  248-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  248-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  248-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  248-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  248-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     1000:  248-block  7
call   23 returned 1000
    $$$$$:  248-block  8
call   24 never executed
    $$$$$:  248-block  9
    $$$$$:  248-block 10
call   25 never executed
    $$$$$:  248-block 11
    $$$$$:  248-block 12
call   26 never executed
    $$$$$:  248-block 13
    $$$$$:  248-block 14
call   27 never executed
        -:  249:    }
        -:  250:
        2:  251:    HashTable B;
        1:  251-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:  251-block  1
call    4 never executed
     2001:  252:    for (int i = 0; i < 2000; ++i) {
        1:  252-block  0
     2001:  252-block  1
branch  0 taken 2000 (fallthrough)
branch  1 taken 1
     2000:  253:        Value data;
     2000:  253-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     4000:  254:        std::string key = std::to_string(i);
     2000:  254-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2000
    $$$$$:  254-block  1
call    4 never executed
    2000*:  255:        EXPECT_TRUE(B.Insert(key, data));
     2000:  255-block  0
call    0 returned 2000
branch  1 taken 2000 (fallthrough)
branch  2 taken 0 (throw)
     2000:  255-block  1
call    3 returned 2000
call    4 returned 2000
branch  5 taken 0 (fallthrough)
branch  6 taken 2000
    %%%%%:  255-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  255-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  255-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  255-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:  255-block  6
call   20 never executed
call   21 never executed
call   22 never executed
     2000:  255-block  7
call   23 returned 2000
    $$$$$:  255-block  8
call   24 never executed
    $$$$$:  255-block  9
    $$$$$:  255-block 10
call   25 never executed
    $$$$$:  255-block 11
    $$$$$:  255-block 12
call   26 never executed
    $$$$$:  255-block 13
    $$$$$:  255-block 14
call   27 never executed
        -:  256:    }
     1001:  257:    for(int i = 1000; i < 2000; ++i) {
        1:  257-block  0
     1001:  257-block  1
branch  0 taken 1000 (fallthrough)
branch  1 taken 1
    1000*:  258:        EXPECT_TRUE(B.Erase(std::to_string(i)));
     1000:  258-block  0
call    0 returned 1000
branch  1 taken 1000 (fallthrough)
branch  2 taken 0 (throw)
     1000:  258-block  1
call    3 returned 1000
branch  4 taken 1000 (fallthrough)
branch  5 taken 0 (throw)
     1000:  258-block  2
call    6 returned 1000
call    7 returned 1000
call    8 returned 1000
branch  9 taken 0 (fallthrough)
branch 10 taken 1000
    %%%%%:  258-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  258-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:  258-block  5
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  258-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  258-block  7
call   24 never executed
call   25 never executed
call   26 never executed
     1000:  258-block  8
call   27 returned 1000
    $$$$$:  258-block  9
    $$$$$:  258-block 10
call   28 never executed
    $$$$$:  258-block 11
    $$$$$:  258-block 12
call   29 never executed
    $$$$$:  258-block 13
    $$$$$:  258-block 14
call   30 never executed
    $$$$$:  258-block 15
    $$$$$:  258-block 16
call   31 never executed
        -:  259:    }
        -:  260:
       1*:  261:    EXPECT_EQ(A != B, false);
        1:  261-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  261-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  261-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  261-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  261-block  4
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:  261-block  5
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%:  261-block  6
call   19 never executed
call   20 never executed
        1:  261-block  7
call   21 returned 1
    $$$$$:  261-block  8
    $$$$$:  261-block  9
    $$$$$:  261-block 10
call   22 never executed
    $$$$$:  261-block 11
    $$$$$:  261-block 12
call   23 never executed
    $$$$$:  261-block 13
    $$$$$:  261-block 14
call   24 never executed
        1:  262:}
------------------
function main called 1 returned 100% blocks executed 100%
        1:  263:int main() {
        1:  264:    testing::InitGoogleTest();
        1:  264-block  0
call    0 returned 1
        1:  265:    return RUN_ALL_TESTS();
call    0 returned 1
        -:  266:}
